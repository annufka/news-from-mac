<?php

    use Drupal\Core\Access\AccessResult;
    use Drupal\Core\Datetime\DrupalDateTime;
    use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
    use Drupal\node\Entity\NodeType;

    function bda_hello_theme($existing, $type, $theme, $path) {
      return [
      'bda-hello-template' => [
        'variables' => ['test_var' => NULL],
       ],
    ];
    }

    /**
    * Implements hook_form_alter().
    */
    function bda_hello_form_alter(&$form, $form_state, $form_id) {
        if ($form_id == 'user_login_form') {
            $form['#submit'][] = 'dba_hello_user_login_submit';
        }
    }

    // http://web.localhost/user/login

    /**
     * Additional handler for user_login form submit.
     */
    function dba_hello_user_login_submit($form, &$form_state) {
        $roles = \Drupal::currentUser()->getRoles();
        if (in_array('moderator', $roles)) {
            $url = Drupal\core\Url::fromUserInput('/admin/content');
            $form_state->setRedirectUrl($url);
        } else {
            $url = Drupal\core\Url::fromUserInput('/');
            $form_state->setRedirectUrl($url);
        }
    }

    /**
     * Implements hook_entity_field_access().
     */
    function bda_hello_entity_field_access($operation, $field_definition, $account, $items = NULL) {
        if ($field_definition->getName() == 'field_date_of_publish' && $operation == 'edit' && !$account->hasPermission('add publish date')) {
            return AccessResult::forbidden();
        }
        return AccessResult::allowed();
    }

    /**
     * Implements hook_entity_presave().
     */
    function bda_hello_entity_presave($entity) {
        if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'news') {
            if (!$entity->isNew() && $entity->get('status')->getValue() != $entity->original->get('status')->getValue()) {
                $entity->field_date_of_publish->value = date('Y-m-d') . 'T' . date('h:i:s');
            }
        }
    }

    /**
     * Implements hook_entity_access().
     */
    function bda_hello_entity_access($entity, $operation, $account) {

        if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'news') {
            if ($operation == 'view') {
                if(!$account->hasPermission('future news')) {
                  $entity_date = $entity->field_date_of_publish->date;

                  $now = new DrupalDateTime('now');
                  $now->setTimezone(new \DateTimeZone(DateTimeItemInterface::STORAGE_TIMEZONE));
                    if ($now < $entity_date) {
                        return AccessResult::forbidden();
                    }
                }
            }
        }
        return AccessResult::allowed();
    }
/**
 * Implements hook_cron().
 */
function bda_hello_cron() {

    $now = new DrupalDateTime('now');
    $now->setTimezone(new \DateTimeZone(DateTimeItemInterface::STORAGE_TIMEZONE));
    $now = $now->getTimestamp();
    $nodeStorage = Drupal::entityTypeManager()->getStorage('node');
    $nodeIds = $nodeStorage->getQuery()
      ->condition('type', 'news')
      ->condition('status', 1)
      ->condition('field_archive', 0)
      ->execute();
    $nodes = $nodeStorage->loadMultiple($nodeIds);
    foreach ($nodes as $node) {
      $published = $node->get('field_date_of_published')->date->getTimestamp();
      $diff = $now - $published;
      if ($diff > 60 * 60 * 24 * 30) {
        $node->set('field_archive', 1);
        $node->save();
      }
    }
}

/**
 * Implements hook_mail().
 */
function bda_hello_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );

   switch ($key) {
     case 'create_news':
       $message['from'] = \Drupal::config('system.site')->get('mail');
       $message['subject'] = t('Node created: @title', array('@title' => $params['node_title']), $options);
       $message['body'][] = $params['message'];
       break;
   }
}

/**
 * Implements hook_entity_insert().
 */
function bda_hello_entity_insert(\Drupal\Core\Entity\EntityInterface $entity){

  if ($entity->getEntityTypeId() !== 'node' || ($entity->getEntityTypeId() === 'node' && $entity->bundle() !== 'news')) {
    return;
  }
   $mailManager = \Drupal::service('plugin.manager.mail');
   $module = 'bda_hello';
   $key = 'create_news';
   $to = \Drupal::currentUser()->getEmail();
   $params['message'] = $entity->get('field_news_description')->value;
   $params['node_title'] = $entity->label();
   $langcode = \Drupal::currentUser()->getPreferredLangcode();
   $send = true;

   $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
   if ($result['result'] !== true) {
     \Drupal::messenger()->addMessage(t('There was a problem sending your message and it was not sent.'), 'error');
   }
   else {
     \Drupal::messenger()->addMessage(t('Your message has been sent.'));
   }

}

/**
 * Implements hook_entity_extra_field_info().
 */
function bda_hello_entity_extra_field_info() {
  $extra = [];

  foreach (NodeType::loadMultiple() as $bundle) {
    $extra['node'][$bundle->id()]['display']['created_time_sec'] = [
      'label' => t('Created, sec.'),
      'description' => t('Calculate created time'),
      'weight' => 100,
      'visible' => TRUE,
    ];
  }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function bda_hello_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($display->getComponent('created_time_sec')) {

    $renderer = \Drupal::service('renderer');

    $config = \Drupal::config('system.site');

    $now = new DrupalDateTime('now');
    $now->setTimezone(new \DateTimeZone(DateTimeItemInterface::STORAGE_TIMEZONE));

    $date_create = date('Y-m-d H:i:s', $entity->get("created")->value);

    $diff = strtotime($now) - strtotime($date_create);

    $build['created_time_sec'] = [
      '#type' => 'markup',
      '#markup' => 'Time ' . $diff . '',
    ];
    $renderer->addCacheableDependency($build, $config);
  }
}
